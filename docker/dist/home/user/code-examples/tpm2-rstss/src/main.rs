use tss_esapi::{Context, TctiNameConf};

fn main() {
    /*
     * Source: tss-esapi context.rs
     * Safe abstraction over an ESYS_CONTEXT.
     *
     * Serves as a low-level abstraction interface to the TPM, providing a thin wrapper around the
     * `unsafe` FFI calls. It is meant for more advanced uses of the TSS where control over all
     * parameters is necessary or important.
     *
     * The methods it exposes take the parameters advertised by the specification, with some of the
     * parameters being passed as generated by `bindgen` and others in a more convenient/Rust-efficient
     * way.
     *
     * The context also keeps track of all object allocated and deallocated through it and, before
     * being dropped, will attempt to close all outstanding handles. However, care must be taken by
     * the client to not exceed the maximum number of slots available from the RM.
     *
     * Code safety-wise, the methods should cover the two kinds of problems that might arise:
     * * in terms of memory safety, all parameters passed down to the TSS are verified and the library
     * stack is then trusted to provide back valid outputs
     * * in terms of thread safety, all methods require a mutable reference to the context object,
     * ensuring that no two threads can use the context at the same time for an operation (barring use
     * of `unsafe` constructs on the client side)
     * More testing and verification will be added to ensure this.
     *
     * For most methods, if the wrapped TSS call fails and returns a non-zero `TPM2_RC`, a
     * corresponding `Tss2ResponseCode` will be created and returned as an `Error`. Wherever this is
     * not the case or additional error types can be returned, the method definition should mention
     * it.
     */
    let mut context = Context::new(TctiNameConf::from_environment_variable()
        .expect("Failed to get TCTI / TPM2TOOLS_TCTI from environment. Try `export TCTI=device:/dev/tpmrm0`"))
        .expect("Failed to create context");

    /*
     * Source: tss-esapi context/tpm_commands/random_number_generator.rs
     * Get a number of random bytes from the TPM and return them.
     *
     * # Errors
     * if converting `num_bytes` to `u16` fails, a `WrongParamSize` will be returned
     */
    match context.get_random(8) {
        Ok(random_digest) => {
            let number = unsafe { random_digest.align_to::<u64>().1[0] };

            println!("{}", number);
        }
        Err(err) => eprintln!("An Error occured during random generation: {}", err),
    }
    // Nothing has to be cleaned up because of the borrow checker.
    // All variables will be destroyed at the end of the scope.
}
